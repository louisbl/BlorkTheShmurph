<?xml version="1.0" encoding="utf-8"?>
<views:AView xmlns:fx="http://ns.adobe.com/mxml/2009" 
			 xmlns:s="library://ns.adobe.com/flex/spark" xmlns:views="crm.gobelins.darkunicorn.views.*"
			 currentState="playing"
			 backgroundAlpha="0.0">
	<fx:Script>
		<![CDATA[
			import com.gobelins.DarkUnicorn.DarkUnicornGameCore;
			import com.gobelins.DarkUnicorn.api.IGameCore;
			
			import org.osflash.signals.Signal;
			
			import spark.events.ViewNavigatorEvent;
			
			public var finish_signal : Signal = new Signal(int);
			public var btn_cancel_signal : Signal = new Signal();
			public var paused_signal : Signal = new Signal();
			public var resume_signal : Signal = new Signal();
			
			protected var _loaded : Boolean;
			protected var _started : Boolean;

			protected var blork : DarkUnicornGameCore;
			
			protected function _onPausedClicked() : void {
				currentState = "paused";
				blork.pause();
				paused_signal.dispatch();
			}
			
			protected function _onResumeClicked() : void{
				currentState = "playing";
				blork.resume();
				resume_signal.dispatch();
			}
			
			protected function _onScoreClicked() : void{
				blork.clean();
				game.removeChild(blork);
				blork = null;
				finish_signal.dispatch(3900);
			}
			
			protected function _onCancelClicked() : void{
				blork.clean();
				game.removeChild(blork);
				blork = null;
				btn_cancel_signal.dispatch();
			}
			public function pauseGame() : void {
				//(game_view.content as IGameCore).pause();
			}
			
			public function resumeGame() : void {
				//(game_view.content as IGameCore).resume();				
			}
			
			public function restartGame() : void {
				/*if( !_loaded ){
					game_view.addEventListener(Event.COMPLETE,_onComplete);
					game_view.load();
				}else {
					if(_started)
						(game_view.content as IGameCore).clean();								
					(game_view.content as IGameCore).start();								
					_started = true;
				}*/
				this.stage.frameRate = 60;
				blork = new DarkUnicornGameCore();
				blork.addEventListener(DataEvent.DATA,_onScore);
				game.addChild( blork );
			}
			
			protected function _onComplete(event:Event):void
			{
				//game_view.removeEventListener(Event.COMPLETE,_onComplete);
				_loaded = true;
			}
			
			protected function _onScore(event:DataEvent):void
			{
				blork.clean();
				game.removeChild(blork);
				blork = null;
				finish_signal.dispatch( parseInt(event.data) );
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<!-- Placer ici les éléments non visuels (services et objets de valeur, par exemple). -->
	</fx:Declarations>
	<views:states>
		<s:State name="paused"/>
		<s:State name="playing"/>
	</views:states>
	<s:SpriteVisualElement id="game"/>
	<!--
	<s:SWFLoader id="game_view" source="game_core.swf" autoLoad="false"/>
	-->
	<s:Group width="100%" height="100%">
		<s:layout>
			<s:VerticalLayout horizontalAlign="left" verticalAlign="bottom"/>
		</s:layout>
		<s:Button id="pause" includeIn="playing" click="_onPausedClicked()">
			<s:label>{resourceManager.getString('game','pause')}</s:label>
		</s:Button>
	</s:Group>
	<s:Group includeIn="paused" id="menu_pause" width="100%" height="100%">
		<s:layout>
			<s:VerticalLayout horizontalAlign="center" verticalAlign="middle"/>
		</s:layout>
		<s:Button id="btn_resume" click="_onResumeClicked()">
			<s:label>{resourceManager.getString('game','resume')}</s:label>
		</s:Button>
		<s:Button id="btn_cancel" click="_onCancelClicked()">
			<s:label>{resourceManager.getString('game','cancel')}</s:label>
		</s:Button>
		<s:Button id="btn_score"  click="_onScoreClicked()">
			<s:label>DEBUG score = 1200</s:label>
		</s:Button>
	</s:Group>
</views:AView>
